syntax = "proto3";

package tls;

message ClientConfiguration {
  // PEM data for the certificate authorities that should be used to
  // validate the remote TLS server. The default system certificate
  // authorities are used when left unset.
  string server_certificate_authorities = 1;

  // PEM data for the certificate used by the TLS client. No client
  // certificate/private key is used when left unset.
  string client_certificate = 2;

  // PEM data for the private key used by the TLS client. No client
  // certificate/private key is used when left unset.
  string client_private_key = 3;

  // List of supported cipher suites for TLS versions up to TLS 1.2. If
  // empty, a default list of cipher suites is used. Note that TLS 1.3
  // cipher suites are not configurable.
  //
  // Valid cipher suite names may be found here:
  // https://golang.org/pkg/crypto/tls/#pkg-constants
  repeated string cipher_suites = 4;

  // The value of the Server Name Indication (SNI) extension sent by the
  // client to the server. This value is also used when validating the
  // handshake response sent by the server. When not set, the server
  // name is automatically extracted from the endpoint address.
  //
  // This option may be useful in case the use of DNS needs to be
  // avoided. The endpoints may be specified in the form of IPv4/IPv6
  // addresses. This field can be used to specify the expected DNS name
  // of the server certificate.
  string server_name = 5;
}

message ServerConfiguration {
  // PEM data for the certificate used by the TLS server.
  string server_certificate = 1;

  // PEM data for the private key used by the TLS server.
  string server_private_key = 2;

  // List of supported cipher suites for TLS versions up to TLS 1.2. If
  // empty, a default list of cipher suites is used. Note that TLS 1.3
  // cipher suites are not configurable.
  //
  // Valid cipher suite names may be found here:
  // https://golang.org/pkg/crypto/tls/#pkg-constants
  repeated string cipher_suites = 3;
}
